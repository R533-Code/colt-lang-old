/*****************************************************************//**
 * @file   parsed_unit.cpp
 * @brief  Contains the implementation of ParsedUnit.
 * 
 * @author RPC
 * @date   March 2024
 *********************************************************************/
#include "parsed_unit.h"
#include "parsed_program.h"
#include "ast.h"

namespace clt::lng
{
  ParsedUnit::ParsedUnit(ParsedProgram& program, const std::filesystem::path& path) noexcept
    : _program(program), path(path), exprs(program.type_buffer()) {}

  ParsedUnit::ParsedUnit(ParsedProgram& program, StringView to_parse) noexcept
    : _program(program), path(ParsedProgram::EMPTY_PATH), exprs(program.type_buffer()), to_parse(to_parse) {}

  ParsedUnit::ParseResult ParsedUnit::parse() noexcept
  {
    assert_true("parse must only be called once!", !is_parsed());
    // Set is_parsed to true when the function returns
    ON_SCOPE_EXIT { _is_parsed = true; };

    // If the path is EMPTY_PATH, then to parse was already initialized
    // with the right string to parse (used for REPL)
    if (path != ParsedProgram::EMPTY_PATH)
    {
      if (std::error_code err; !std::filesystem::is_regular_file(path, err))
        return ParseResult::INVALID_PATH;    
      auto file = String::getFile(path.string().c_str());
      if (file.is_error())
        return ParseResult::FILE_ERROR;
      to_parse = std::move(*file);
    }

    auto& reporter = _program.reporter();
    // Save the error count
    u64 error_c = reporter.error_count();
    u64 warn_c = reporter.warn_count();    
    
    // Lexing of the file
    Lex(tokens, reporter, to_parse);
    // Create AST of the file
    make_ast(*this);
    
    // Count of errors generated by this unit
    _error_count = static_cast<u32>(reporter.error_count() - error_c);
    _warn_count = static_cast<u32>(reporter.warn_count() - warn_c);

    return error_count ? ParseResult::COMP_ERROR : ParseResult::SUCCESS;
  }
  
  const ErrorReporter& ParsedUnit::reporter() const noexcept
  {
    return program.reporter();
  }
  
  ErrorReporter& ParsedUnit::reporter() noexcept
  {
    return program.reporter();
  }
}