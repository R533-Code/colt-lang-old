/*****************************************************************//**
 * @file   parsed_unit.cpp
 * @brief  Contains the implementation of ParsedUnit.
 * 
 * @author RPC
 * @date   March 2024
 *********************************************************************/
#include "parsed_unit.h"
#include "parsed_program.h"

namespace clt::lng
{
  ParsedUnit::ParseResult ParsedUnit::parse() noexcept
  {
    assert_true("parse must only be called once!", to_parse.capacity() == 0);
    if (std::error_code err; !std::filesystem::is_regular_file(path, err))
      return ParseResult::INVALID_PATH;

    auto file = String::getFile(path.string().c_str());
    if (file.is_error())
      return ParseResult::FILE_ERROR;
    to_parse = std::move(*file);

    auto& reporter = program.getReporter();
    // Save the error count
    u64 error_c = reporter.getErrorCount();
    u64 warn_c = reporter.getWarnCount();    
    
    Lex(tokens, reporter, to_parse);
    
    // Count of errors generated by this unit
    error_count = static_cast<u32>(reporter.getErrorCount() - error_c);
    warn_count = static_cast<u32>(reporter.getWarnCount() - warn_c);

    return error_count ? ParseResult::COMP_ERROR : ParseResult::SUCCESS;
  }
}